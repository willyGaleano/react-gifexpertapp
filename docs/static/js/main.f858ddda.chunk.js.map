{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6KAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAoB5C,OACI,sBAAMC,SAZW,SAACC,GAGlBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAMlB,SACI,mCACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SArBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,e,+BCXlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAeZM,GAfY,4CAAH,sDCEb,SAASO,EAAT,GAAyC,IAAlBJ,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,MAAOV,EAAO,EAAPA,IAEpC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,sBAAKgB,UAAU,yCAAf,UACG,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,OCHR,IAAMS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAZAC,qBAAW,WACP1B,EAAQC,GACH0B,MAAK,SAAAC,GACFH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAKvB,CAACtB,IAEIuB,EDfwBK,CAAa5B,GAAhCa,EALyB,EAK9BN,KAAae,EALiB,EAKjBA,QAEpB,OACI,qCAEA,mCAAMtB,EAAN,OAECsB,GAAW,2CAEZ,qBAAKJ,UAAU,YAAf,SAGYL,EAAOJ,KAAK,SAAAC,GAAG,OACZ,cAACK,EAAD,eAEIL,GADCA,EAAIC,aEnBnBkB,EAAe,WAAO,IAAD,EAGM3C,mBAChC,CAAC,WAJyB,mBAGvB4C,EAHuB,KAGX7C,EAHW,KAa9B,OACI,qCACI,8CACC,cAAC,EAAD,CAAaA,cAAiBA,IAC/B,uBAEA,6BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAYA,GADPA,Y,MCrB7B+B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.f858ddda.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState(''); // ''\r\n    //const [inputValue, setInputValue] = useState(''); undefine\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        //para prevenir el comportamiento del form, que actualiza\r\n        //toda la pagina\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats => [ inputValue, ...cats]);\r\n            setInputValue('');    \r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}> \r\n            <>\r\n                <input\r\n                    type=\"text\"\r\n                    value = {inputValue}\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n            </>\r\n        </form>\r\n        \r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Cd0AslwuDn9je3q1dbi9o3rBdTYnvDnt`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            //? para que use solo si hay imagenes\r\n            url: img.images?.downsized_medium.url\r\n            \r\n        }\r\n    });\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport function GifGridItem( {id,title, url} ) {\r\n    console.log(id, title, url)\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n           <img src={url} alt={title} />\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {useFetchGifs} from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from './GifGridItem';\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    //Hooks -> es una forma de extraer l√≥gica de algun componente\r\n    // y que sea sencilla de reutilizar\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            \r\n        <h3> {category} </h3>\r\n\r\n        {loading && <p>Loading...</p>}\r\n\r\n        <div className=\"card-grid\">\r\n               \r\n                {\r\n                    images.map( img => (\r\n                       <GifGridItem \r\n                       key={img.id} \r\n                       {...img} />\r\n                    ))\r\n                }\r\n               \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //condicionar el useState, que solo se ejecute una vez\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    //si la categoria cambia volvera a ejecutar ese efecto\r\n    },[category])\r\n\r\n    return state ;\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategories] = useState(\r\n        ['Naruto']);\r\n    \r\n    /*    \r\n    const handleAdd = () => {\r\n        \r\n        setCategories(cats => [...cats, 'Breaking Bad']);\r\n    }\r\n    */\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n             <AddCategory setCategories = {setCategories} />\r\n            <hr/>  \r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => \r\n                        <GifGrid \r\n                        key={category} \r\n                        category = {category}/>\r\n                    )\r\n                }\r\n            </ol>\r\n\r\n        \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp/>,\n \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}